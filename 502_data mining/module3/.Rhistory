#pull csv data and overview
shoppers.data <- read.csv("online_shoppers_intention.csv")
print(as.data.frame(head(shoppers.data)))
knitr::opts_chunk$set(echo = TRUE)
#Chapter 3: Question 21
#read our nutritional data in
df = read.csv("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module1/Website Data Sets/nutrition_subset.csv")
#Chapter 3: Question 21
#read our nutritional data in
df = read.csv("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module1/Website Data Sets/nutrition_subset.csv")
names(df)
#sort by saturated fat
df.sorted = df[order(saturated_fat)]
)
df.sorted = df[order(df$saturated_fat)]
#sort by saturated fat
df.sorted = df[order(saturated_fat)]
#sort by saturated fat
df.sorted = df[order(saturated_fat),]
df.sorted = df[order(df$saturated_fat),]
df.sorted
#sort by saturated fat
df.sorted_desc = df[order(-df$saturated_fat),]
head(df)
head(df.sorted_desc)
#Chapter 3: Question 21
#read our nutritional data in
df = read.csv("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module1/Website Data Sets/nutrition_subset.csv")
#a:sort by saturated fat
df.sorted_desc = df[order(-df$saturated_fat),]
#get top five food items
df.top_five = head(df,n=5)
#print our top five
print(df.top_five)
#a:sort by saturated fat
df.sorted_desc = df[order(-df$saturated_fat),]
#get top five food items
df.top_five = tail(df,n=5)
#print our top five
print(df.top_five)
#a:sort by saturated fat
df.sorted_desc = df[order(-df$saturated_fat),]
#get top five food items
df.top_five = head(df,n=5)
#print our top five
print(df.top_five)
#a:sort by saturated fat
df.sorted_desc = df[order(df$saturated_fat,decreasing=TRUE),]
#get top five food items
df.top_five = head(df,n=5)
#print our top five
print(df.top_five)
#a:sort by saturated fat
df.sorted_desc = df[order(saturated_fat,decreasing=TRUE),]
#Chapter 3: Question 21
#read our nutritional data in
df = read.csv("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module1/Website Data Sets/nutrition_subset.csv")
#a:sort by saturated fat
df.sorted_desc = df[order(df$saturated_fat,decreasing=TRUE),]
#get top five food items
df.top_five = head(df,n=5)
#print our top five
print(df.top_five)
#a:sort by saturated fat
df.sorted_desc = df[order(df$saturated_fat,decreasing=TRUE),]
#get top five food items
df.top_five = head(df.sorted_desc,n=5)
#print our top five
print(df.top_five)
#create our new variable
df$satured_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$satured_fat_per_gram,decreasing=TRUE)]
#create our new variable
df$saturated_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$satured_fat_per_gram,decreasing=TRUE)]
#create our new variable
df$saturated_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$saturated_fat_per_gram,decreasing=TRUE)]
#create our new variable
df$saturated_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$saturated_fat_per_gram,decreasing=TRUE),]
#b. get the food with the most saturated fat per gram
print(head(df.sorted_by_sfpg,n=1))
#create our new variable
df$saturated_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$saturated_fat_per_gram,decreasing=TRUE),]
#b. get the food with the most saturated fat per gram
most_sfpg = subset(head(df.sorted_by_sfpg,n=1),select=c(food.item,saturated_fat_per_gram))
print(most_sfpg)
#create new variable
df$cholesterol_per_gram = df$cholesterol/df$weight_in_grams
#sort dataset, produce top five, output food with the most cholesterol
df.sorted_chol = df[order(df$cholesterol_per_gram,decreasing=TRUE),]
df.top_five_chol = head(df.sorted_chol,n=5)
print(df.top_five_chol)
#create new variable
df$cholesterol_per_gram = df$cholesterol/df$weight_in_grams
#sort dataset, produce top five, output food with the most cholesterol
df.sorted_chol = df[order(df$cholesterol_per_gram,decreasing=TRUE),]
df.top_five_chol = subset(head(df.sorted_chol,n=5),select=c(food.item,cholesterol_per_gram))
print(df.top_five_chol)
df$sfpg.std = (df$saturated_fat_per_gram - mean(df$saturated_fat_per_gram)) / sd(df$saturated_fat_per_gram)
df
hist(df$sfpg.std)
mean(df$sfpg.std)
std(df$sfpg.std)
sd(df$sfpg.std)
hist(df$satured_fat_per_gram)
hist(df$satured_fat)
hist(df$satured_fat_per_gram)
df$saturated_fat = df$satured_fat_per_gram
knitr::opts_chunk$set(echo = TRUE)
#Chapter 3
#read our nutritional data in
df = read.csv("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module1/Website Data Sets/nutrition_subset.csv")
#QUESTION 21
#a:sort by saturated fat
df.sorted_desc = df[order(df$saturated_fat,decreasing=TRUE),]
#get top five food items
df.top_five = head(df.sorted_desc,n=5)
#print our top five
print(df.top_five)
#create our new variable
df$saturated_fat_per_gram = df$saturated_fat/df$weight_in_grams
#a. sort by saturated fat per gram
df.sorted_by_sfpg = df[order(df$saturated_fat_per_gram,decreasing=TRUE),]
#b. get the food with the most saturated fat per gram
most_sfpg = subset(head(df.sorted_by_sfpg,n=1),select=c(food.item,saturated_fat_per_gram))
print(most_sfpg)
#create new variable
df$cholesterol_per_gram = df$cholesterol/df$weight_in_grams
#sort dataset, produce top five, output food with the most cholesterol
df.sorted_chol = df[order(df$cholesterol_per_gram,decreasing=TRUE),]
df.top_five_chol = subset(head(df.sorted_chol,n=5),select=c(food.item,cholesterol_per_gram))
print(df.top_five_chol)
#standardize data using z score
df$sfpg.std = (df$saturated_fat_per_gram - mean(df$saturated_fat_per_gram)) / sd(df$saturated_fat_per_gram)
hist(df$saturated_fat_per_gram)
hist(df$sfpg.std)
hist(df$saturated_fat_per_gram)
hist(df$saturated_fat_per_gram)
df$saturated_fat_per_gram
hist(df$sfpg.std)
hist(df$saturated_fat_per_gram)
plot(pdf(df$saturated_fat_per_gram))
plot(density(df$saturated_fat_per_gram))
print(plot(density(df$saturated_fat_per_gram)))
(plot(density(df$saturated_fat_per_gram)))
#begin
d <- density(df$saturated_fat_per_gram) # returns the density data
plot(d)
#begin
d <- density(df$saturated_fat_per_gram) # returns the density data
plot(d)
#standardize data using z score
df$sfpg.std = (df$saturated_fat_per_gram - mean(df$saturated_fat_per_gram)) / sd(df$saturated_fat_per_gram)
#we define outliers as greater than three standard deviations and produce
df.outliers_high = subset(df,df$sfpg.std >= 3)
df.outliers_low = subset(df,df$sfpg.std <= -3)
#print outlier
#begin by looking at distribution
d <- density(df$saturated_fat_per_gram) # returns the density data
plot(d)
chisq.out.test()
install.packages("outliers")
require(outliers)
chisq.out.test(df$saturated_fat_per_gram)
require(outliers)
chisq.out.test(df$saturated_fat_per_gram)
#standardize
df$sfpg.std = scale(x = df$saturated_fat_per_gram)
df$sfpg.std
plot(df$saturated_fat_per_gram)
hist(df$sfpg.std)
plot(density(df$sfpg.std))
abs(-1)
require(outliers)
chisq.out.test(df$saturated_fat_per_gram)
#standardize
df$sfpg.std = scale(x = df$saturated_fat_per_gram)
subset(abs(df$sfpg.std) >= 3)
require(outliers)
chisq.out.test(df$saturated_fat_per_gram)
#standardize
df$sfpg.std = scale(x = df$saturated_fat_per_gram)
subset(df,abs(df$sfpg.std) >= 3)
df$cpg_z <- scale(df$cholesterol_per_gram)
subset(df,abs(df$cpg_z) >= 3)
plot(density(df$cholesterol_per_gram))
df$cpg_z <- scale(df$cholesterol_per_gram)
subset(df,(df$cpg_z) >= 3)
library(ROCR)
data(ROCR.simple)
df <- data.frame(ROCR.simple)
df
#ROC Curve calculation
library(ROCR)
# plot a ROC curve for a single prediction run
# and color the curve according to cutoff.
data(ROCR.simple)
df <- data.frame(ROCR.simple)
pred <- prediction(df$predictions, df$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
head(df)
#and now we extend this logic to our dataset:
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
head(df)
#and now we extend this logic to our dataset:
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
df.1 <- subset(df,df$model=="m1")
pred <- prediction(df$predictions)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df$predictions)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
#and now we extend this logic to our dataset:
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
df.1 <- subset(df,df$model=="m1")
pred <- prediction(df$predictions,df$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df$predictions,df$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df$predictions,df$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
#ROC Curve calculation
library(ROCR)
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
plot(perf.1,perf.2,colorize=TRUE)
plot(perf.1)
lines(perf.2,col="red")
perf.1
names(perf.1)
table(perf.1)
data.frame(perf.1)
plot(perf.1)
plot(perf.2)
require(ggplot2)
plot(perf.1)
lines(perf.2)
ggplot(perf.1)
plot(perf.1)
plot(perf.2)
par(mfrow=c(2,1))
plot(perf.1)
plot(perf.2)
knitr::opts_chunk$set(echo = TRUE)
#load relevant packaging
library(ROCR)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(2,1))
plot(perf.1)
plot(perf.2)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(1,2))
plot(perf.1)
plot(perf.2)
plot(perf.2,main="Model 2 ROC")
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(1,2))
plot(perf.1,main="Model 1 ROC")
plot(perf.2,main="Model 2 ROC")
#fetch model 1
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
#define formulas for precision, recall, and the F-measure
df.1
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#fetch model 1
df.1 <- subset(df.1,df$model=="m1")
#determine if classed as positive based on t
df.1$positive = df.1$predictions > 0.5
#define formulas for precision, recall, and the F-measure
head(df.1)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#fetch model 1
df.1 <- subset(df.1,df$model=="m1")
#determine if classed as positive based on t
df.1$positive = df.1$predictions > 0.5
#get TP,FP,FN,TN
TP = subset(df.1,labels=="+" & positive==TRUE)
FP = subset(df.1,labels=="-" & positive==TRUE)
FN = subset(df.1,labels=="+" & positive==FALSE)
#define formulas for precision, recall, and the F-measure
precision <- function(TP,FP){
return (TP/(TP+FP))
}
recall <- function(TP,FN){
return (TP/(TP+FN))
}
f_measure <- function(precision,recall){
return ( 2 * (precision*recall)/(precision+recall))
}
df.precision = precision(TP,FP)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#fetch model 1
df.1 <- subset(df.1,df$model=="m1")
#determine if classed as positive based on t
df.1$positive = df.1$predictions > 0.5
#get TP,FP,FN,TN
TP = nrow(subset(df.1,labels=="+" & positive==TRUE))
FP = nrow(subset(df.1,labels=="-" & positive==TRUE))
FN = nrow(subset(df.1,labels=="+" & positive==FALSE))
#define formulas for precision, recall, and the F-measure
precision <- function(TP,FP){
return (TP/(TP+FP))
}
recall <- function(TP,FN){
return (TP/(TP+FN))
}
f_measure <- function(precision,recall){
return ( 2 * (precision*recall)/(precision+recall))
}
df.precision = precision(TP,FP)
df.recall    = recall(TP,FN)
df.fmeasure  = f_measure(df.precision,df.recall)
df.precision
df.recall
df.fmeasure
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#fetch model 1
df.1 <- subset(df.1,df$model=="m1")
#determine if classed as positive based on t
df.1$positive = df.1$predictions > 0.5
#get TP,FP,FN,TN
TP = nrow(subset(df.1,labels=="+" & positive==TRUE))
FP = nrow(subset(df.1,labels=="-" & positive==TRUE))
FN = nrow(subset(df.1,labels=="+" & positive==FALSE))
#define formulas for precision, recall, and the F-measure
precision <- function(TP,FP){
return (TP/(TP+FP))
}
recall <- function(TP,FN){
return (TP/(TP+FN))
}
f_measure <- function(precision,recall){
return ( 2 * (precision*recall)/(precision+recall))
}
df.precision = precision(TP,FP)
df.recall    = recall(TP,FN)
df.fmeasure  = f_measure(df.precision,df.recall)
print(df.precision)
print(df.recall)
print(df.f)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#fetch model 1
df.1 <- subset(df.1,df$model=="m1")
#determine if classed as positive based on t
df.1$positive = df.1$predictions > 0.5
#get TP,FP,FN,TN
TP = nrow(subset(df.1,labels=="+" & positive==TRUE))
FP = nrow(subset(df.1,labels=="-" & positive==TRUE))
FN = nrow(subset(df.1,labels=="+" & positive==FALSE))
#define formulas for precision, recall, and the F-measure
precision <- function(TP,FP){
return (TP/(TP+FP))
}
recall <- function(TP,FN){
return (TP/(TP+FN))
}
f_measure <- function(precision,recall){
return ( 2 * (precision*recall)/(precision+recall))
}
df.precision = precision(TP,FP)
df.recall    = recall(TP,FN)
df.fmeasure  = f_measure(df.precision,df.recall)
print(df.precision)
print(df.recall)
print(df.fmeasure)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(1,2))
plot(perf.1,main="Model 1 ROC",col="red")
plot(perf.2,main="Model 2 ROC",col="green")
plot(perf.2,main="Model 2 ROC",col="green",lwd=2)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(1,2))
plot(perf.1,main="Model 1 ROC",col="blue",lwd-2)
#load in our dataset and adjust corrupted column headers
setwd("C:/Users/Filipp/Documents/usd_data_sci/502_data mining/module3")
df = read.csv("question_16_data.csv")
names(df)[1] = "models"
#calculate ROC curves for each model
df.1 <- subset(df.1,df$model=="m1")
pred <- prediction(df.1$predictions,df.1$labels)
perf.1 <- performance(pred,"tpr","fpr")
#..
df.2 <- subset(df,df$model=="m2")
pred <- prediction(df.2$predictions,df.2$labels)
perf.2 <- performance(pred,"tpr","fpr")
#co-plot in the same frame.
par(mfrow=c(1,2))
plot(perf.1,main="Model 1 ROC",col="blue",lwd=2)
plot(perf.2,main="Model 2 ROC",col="green",lwd=2)
